# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run test and verifyPlugin tasks,
# - run buildPlugin task and prepare artifact for the further tests,
# - run IntelliJ Plugin Verifier,
# - create a draft release.
#
# Workflow is triggered on push and pull_request events.
#
# Docs:
# - GitHub Actions: https://help.github.com/en/actions
# - IntelliJ Plugin Verifier GitHub Action: https://github.com/ChrisCarini/intellij-platform-plugin-verifier-action
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [main]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

  # Run verifyPlugin and test Gradle tasks
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      security-events: write
    steps:

      # Setup Java 17 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Cache Gradle dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v3.3.2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', 'gradle.properties') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3.3.2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Run detekt, ktlint and tests
      - name: Run Linters and Test
        run: ./gradlew check

      # Publish test results
      - name: Publish Test Report
        if: ${{ always() }}
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          junit_files: ${{ github.workspace }}/build/test-results/**/*.xml

      # Annotate sources with detekt issues
      - name: Generate Detekt Annotations
        if: ${{ always() }}
        uses: lcollins/checkstyle-github-action@v2
        with:
          name: Detekt Report
          title: Detekt Report
          path: ${{ github.workspace }}/build/reports/detekt.xml

      # Upload detekt results
      - name: Upload Detekt Report
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ github.workspace }}/build/reports/detekt.sarif.json
          checkout_path: ${{ github.workspace }}

      # Run verifyPlugin Gradle task
      - name: Verify Plugin
        run: ./gradlew verifyPlugin

  # Build plugin with buildPlugin Gradle task and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.properties.outputs.name }}
      pluginGroup: ${{ steps.properties.outputs.pluginGroup }}
      pluginVersion: ${{ steps.properties.outputs.pluginVersion }}
      version: ${{ steps.properties.outputs.version }}
      ideVersions: ${{ steps.properties.outputs.ideVersions }}
      changelog: ${{ steps.properties.outputs.changelog }}
      artifact: ${{ steps.properties.outputs.artifact }}
    steps:

      # Setup Java 17 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Cache Gradle Dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v3.3.2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', 'gradle.properties') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3.3.2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
          PLUGIN_GROUP="$(echo "$PROPERTIES" | grep "^pluginGroup:" | cut -f2- -d ' ')"
          PLUGIN_VERSION="$(echo "$PROPERTIES" | grep "^pluginVersion:" | cut -f2- -d ' ')"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          IDE_VERSIONS_STRING="$(echo "$PROPERTIES" | grep "^pluginVerifierIdeVersions:" | cut -f2- -d ' ' | sed 's/ //g')"
          IDE_VERSIONS="$(echo "\"$IDE_VERSIONS_STRING\"" | jq -c 'split(",")')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          ARTIFACT="${NAME}-${VERSION}.zip"

          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "pluginGroup=$PLUGIN_GROUP" >> $GITHUB_OUTPUT
          echo "pluginVersion=$PLUGIN_VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ideVersions=$IDE_VERSIONS" >> $GITHUB_OUTPUT
          echo "changelog<<%%EOF%%" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "%%EOF%%" >> $GITHUB_OUTPUT
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT

      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin

      # Upload plugin artifact to make it available in the next jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugin-artifact
          path: ./build/distributions/${{ steps.properties.outputs.artifact }}

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: plugin-artifact
          path: ./build/distributions/${{ steps.properties.outputs.artifact }}

  # Verify built plugin using IntelliJ Plugin Verifier tool
  # Requires build job to be passed
  verify:
    name: Verify
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ideVersion: ${{ fromJson(needs.build.outputs.ideVersions) }}
    steps:

      # Setup Java 17 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Cache Gradle Dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v3.3.2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', 'gradle.properties') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3.3.2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3.3.2
        with:
          path: ~/.pluginVerifier/ides
          key: ${{ runner.os }}-plugin-verifier-${{ matrix.ideVersion }}

      # Run IntelliJ Plugin Verifier action using GitHub Action
      - name: Verify Plugin
        id: verify
        run: |
          ./gradlew runPluginVerifier \
            -Pplugin.verifier.home.dir=~/.pluginVerifier \
            -PpluginVerifierIdeVersions=${{ matrix.ideVersion }}

          OUTPUT_DIR="$(ls ${{ github.workspace }}/build/reports/pluginVerifier/)"
          echo "outputDir=${OUTPUT_DIR##* }" >> $GITHUB_OUTPUT

      # Upload Plugin Verifier Report
      - name: Upload Plugin Verifier Report
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.ideVersion }}
          path: ${{ github.workspace }}/build/reports/pluginVerifier/${{ steps.verify.outputs.outputDir }}/

  # Publish report generated by IntelliJ Plugin Verifier tool
  # Requires build and verify jobs to be passed
  publishReport:
    name: Publish Verifier Report
    needs: [build, verify]
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      security-events: write
    steps:

      # Download Plugin Verifier Report
      - name: Download Plugin Verifier Report
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/build/reports/pluginVerifier/

      # Delete Plugin Artifact From Plugin Verifier Reports
      - name: Delete Plugin Artifact
        shell: bash
        run: rm -rf ${{ github.workspace }}/build/reports/pluginVerifier/plugin-artifact

      # Publish Plugin Verifier Results
      - name: Publish Verifier Report
        if: ${{ always() }}
        uses: sczerwinski/publish-intellij-plugin-verifier-report@v1.1.1
        with:
          plugin-id: ${{ needs.build.outputs.pluginGroup }}
          plugin-version: ${{ needs.build.outputs.pluginVersion }}

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: ${{ github.event_name != 'pull_request' }}
    needs: [build, verify]
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Download plugin artifact provided by the previous job
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: plugin-artifact

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        id: createDraft
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: v${{ needs.build.outputs.version }}
          body: ${{ needs.build.outputs.changelog }}
          draft: true
          prerelease: false
          discussion_category_name: Releases
          files: |
            ./${{ needs.build.outputs.artifact }}
          token: ${{ secrets.GITHUB_TOKEN }}
