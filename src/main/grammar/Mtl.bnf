/*
 * Copyright 2020-2023 Slawomir Czerwinski
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="it.czerwinski.intellij.wavefront.lang.parser.MtlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Mtl"
  psiImplClassSuffix="Impl"
  psiPackage="it.czerwinski.intellij.wavefront.lang.psi"
  psiImplPackage="it.czerwinski.intellij.wavefront.lang.psi.impl"

  elementTypeHolderClass="it.czerwinski.intellij.wavefront.lang.psi.MtlTypes"
  elementTypeClass="it.czerwinski.intellij.wavefront.lang.psi.MtlElementType"
  tokenTypeClass="it.czerwinski.intellij.wavefront.lang.psi.MtlTokenType"
}

mtlFile ::= (material | commentBlock)*

commentBlock ::= (commentLine)+ {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlCommentBlockElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.CommentBlockElement"
}
commentLine ::= COMMENT {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.CommentLineElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.CommentLineElement"
}

documentation ::= (commentBlock)? {
  implements = "it.czerwinski.intellij.wavefront.lang.psi.DocumentationElement"
}

material ::= (documentation NEW_MATERIAL_KEYWORD materialIdentifier) (commentBlock? item_)* {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlMaterialElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlMaterialElement"
}

materialIdentifier ::= MATERIAL_NAME {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlMaterialIdentifierElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlMaterialIdentifierElement"
}

private item_ ::= (
  color_ | property_ | map_
)

private color_ ::= (ambientColor | diffuseColor | specularColor | transmissionFilter | emissionColor)

ambientColor ::= (AMBIENT_COLOR_KEYWORD FLOAT FLOAT FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlColorElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlColorElement"
}
diffuseColor ::= (DIFFUSE_COLOR_KEYWORD FLOAT FLOAT FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlColorElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlColorElement"
}
specularColor ::= (SPECULAR_COLOR_KEYWORD FLOAT FLOAT FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlColorElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlColorElement"
}
transmissionFilter ::= (TRANSMISSION_FILTER_KEYWORD FLOAT FLOAT FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlColorElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlColorElement"
}

emissionColor ::= (EMISSION_COLOR_KEYWORD FLOAT FLOAT FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlColorElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlColorElement"
}

private property_ ::= (
  illumination | dissolve | specularExponent | sharpness | opticalDensity | transparency
  | roughness | metalness | sheen | clearcoatThickness | clearcoatRoughness
)

illumination ::= (ILLUMINATION_KEYWORD ILLUMINATION_VALUE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlIlluminationValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlIlluminationValueElement"
}
dissolve ::= (DISSOLVE_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}
specularExponent ::= (SPECULAR_EXPONENT_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}
sharpness ::= (SHARPNESS_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}
opticalDensity ::= (OPTICAL_DENSITY_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}

transparency ::= (TRANSPARENCY_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}
roughness ::= (ROUGHNESS_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}
metalness ::= (METALNESS_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}
sheen ::= (SHEEN_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}
clearcoatThickness ::= (CLEARCOAT_THICKNESS_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}
clearcoatRoughness ::= (CLEARCOAT_ROUGHNESS_KEYWORD FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}

private map_ ::= (colorMap_ | scalarMap_ | bumpMap | reflectionMap)

private colorMap_ ::= (ambientColorMap | diffuseColorMap | specularColorMap | emissionColorMap)

ambientColorMap ::= (AMBIENT_COLOR_MAP_KEYWORD colorMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlTextureElement"
}
diffuseColorMap ::= (DIFFUSE_COLOR_MAP_KEYWORD colorMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlTextureElement"
}
specularColorMap ::= (SPECULAR_COLOR_MAP_KEYWORD colorMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlTextureElement"
}

emissionColorMap ::= (EMISSION_COLOR_MAP_KEYWORD colorMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlTextureElement"
}

private scalarMap_ ::= (
  specularExponentMap | dissolveMap | displacementMap | stencilDecalMap
  | roughnessMap | metalnessMap | sheenMap
  | normalMap
)

specularExponentMap ::= (SPECULAR_EXPONENT_MAP_KEYWORD scalarMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlScalarTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlScalarTextureElement"
}
dissolveMap ::= (DISSOLVE_MAP_KEYWORD scalarMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlScalarTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlScalarTextureElement"
}
displacementMap ::= (DISPLACEMENT_MAP_KEYWORD scalarMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlScalarTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlScalarTextureElement"
}
stencilDecalMap ::= (STENCIL_DECAL_MAP_KEYWORD scalarMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlScalarTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlScalarTextureElement"
}

roughnessMap ::= (ROUGHNESS_MAP_KEYWORD scalarMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlScalarTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlScalarTextureElement"
}
metalnessMap ::= (METALNESS_MAP_KEYWORD scalarMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlScalarTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlScalarTextureElement"
}
sheenMap ::= (SHEEN_MAP_KEYWORD scalarMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlScalarTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlScalarTextureElement"
}

normalMap ::= (NORMAL_MAP_KEYWORD colorMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlTextureElement"
}

bumpMap ::= (BUMP_MAP_KEYWORD bumpMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlTextureElement"
}

reflectionMap ::= (REFLECTION_MAP_KEYWORD reflectionMapOptions_ TEXTURE_FILE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlReflectionTextureElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlReflectionTextureElement"
}

private colorMapOptions_ ::= (
    blendUOption | blendVOption
    | colorCorrectionOption | clampOption
    | valueModifierOption
    | offsetOption | scaleOption | turbulenceOption
    | resolutionOption
)*

private scalarMapOptions_ ::= (
    blendUOption | blendVOption
    | clampOption
    | scalarChannelOption
    | valueModifierOption
    | offsetOption | scaleOption | turbulenceOption
    | resolutionOption
)*

private bumpMapOptions_ ::= (
    blendUOption | blendVOption
    | clampOption
    | scalarChannelOption
    | valueModifierOption
    | offsetOption | scaleOption | turbulenceOption
    | resolutionOption
    | bumpMultiplierOption
)*

private reflectionMapOptions_ ::= reflectionTypeOption colorMapOptions_

blendUOption ::= (BLEND_U_OPTION_NAME FLAG) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFlagValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFlagValueElement"
}
blendVOption ::= (BLEND_V_OPTION_NAME FLAG) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFlagValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFlagValueElement"
}
colorCorrectionOption ::= (COLOR_CORRECTION_OPTION_NAME FLAG) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFlagValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFlagValueElement"
}
clampOption ::= (CLAMP_OPTION_NAME FLAG) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFlagValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFlagValueElement"
}
scalarChannelOption ::= (SCALAR_CHANNEL_OPTION_NAME SCALAR_CHANNEL) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlScalarChannelValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlScalarChannelValueElement"
}
valueModifierOption ::= (VALUE_MODIFIER_OPTION_NAME FLOAT FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatVectorValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatVectorValueElement"
}
offsetOption ::= (OFFSET_OPTION_NAME FLOAT FLOAT FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatVectorValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatVectorValueElement"
}
scaleOption ::= (SCALE_OPTION_NAME FLOAT FLOAT FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatVectorValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatVectorValueElement"
}
turbulenceOption ::= (TURBULENCE_OPTION_NAME FLOAT FLOAT FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatVectorValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatVectorValueElement"
}
resolutionOption ::= (RESOLUTION_OPTION_NAME INTEGER) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlIntegerValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlIntegerValueElement"
}
bumpMultiplierOption ::= (BUMP_MULTIPLIER_OPTION_NAME FLOAT) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlFloatValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlFloatValueElement"
}
reflectionTypeOption ::= (REFLECTION_TYPE_OPTION_NAME REFLECTION_TYPE) {
  mixin = "it.czerwinski.intellij.wavefront.lang.psi.impl.MtlReflectionTypeValueElementImpl"
  implements = "it.czerwinski.intellij.wavefront.lang.psi.MtlReflectionTypeValueElement"
}
